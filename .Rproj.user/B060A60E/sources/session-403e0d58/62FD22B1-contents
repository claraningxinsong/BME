pkgname <- "BME"
source(file.path(R.home("share"), "R", "examples-header.R"))
options(warn = 1)
options(pager = "console")
base::assign(".ExTimings", "BME-Ex.timings", pos = 'CheckExEnv')
base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
base::assign(".format_ptime",
function(x) {
  if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
  if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
  options(OutDec = '.')
  format(x[1L:3L], digits = 7L)
},
pos = 'CheckExEnv')

### * </HEADER>
library('BME')

base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
cleanEx()
nameEx("cut_by_date")
### * cut_by_date

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: cut_by_date
### Title: Cut a dataset for analysis at a specified date
### Aliases: cut_by_date

### ** Examples

d <- simu_enrich_trial(n = 100, prop_S = 0.5, ratio = 1)
dcut <- cut_by_date(d, 10)



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("cut_by_date", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("cut_by_event")
### * cut_by_event

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: cut_by_event
### Title: Cut a dataset for analysis at a specified event count
### Aliases: cut_by_event

### ** Examples

d <- simu_enrich_trial(n = 100, prop_S = 0.5, ratio = 1)
dcut <- cut_by_event(d, 10)



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("cut_by_event", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("dunnett")
### * dunnett

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: dunnett
### Title: Adjusted p value for testing H_J using Dunnett method
### Aliases: dunnett

### ** Examples

p = c(0.01, 0.02, 0.03, 0.013)
cr <- matrix(0.5, 4, 4); diag(cr) <- 1
dunnett(p, cr)



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("dunnett", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("getDesignParameters")
### * getDesignParameters

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: getDesignParameters
### Title: Get hazard ratio thresholds for adaptive enrichment designs
### Aliases: getDesignParameters

### ** Examples

getDesignParameters()



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("getDesignParameters", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("getOC")
### * getOC

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: getOC
### Title: Get operating characteristics via simulations for an enrichment
###   design
### Aliases: getOC

### ** Examples

res <- getOC(seed = 24232, nsim=10)
lapply(res, function(x) mean(apply(x[,1:2], 1, any, na.rm=TRUE)))



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("getOC", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("getOC_BME")
### * getOC_BME

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: getOC_BME
### Title: Get operating characteristics via simulations for an enrichment
###   design
### Aliases: getOC_BME

### ** Examples

res <- getOC(seed = 24232, nsim=10)
lapply(res, function(x) mean(apply(x[,1:2], 1, any, na.rm=TRUE)))



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("getOC_BME", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("getOC_par")
### * getOC_par

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: getOC_par
### Title: Get operating characteristics via simulations for an enrichment
###   design
### Aliases: getOC_par

### ** Examples

res <- getOC_par(ncore = 2, seed = 24232, nsim=10)
lapply(res, function(x) mean(apply(x[,1:2], 1, any, na.rm=TRUE)))



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("getOC_par", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
graphics::par(get("par.postscript", pos = 'CheckExEnv'))
cleanEx()
nameEx("getZstats_FA")
### * getZstats_FA

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: getZstats_FA
### Title: Get test statistics for a given trial.
### Aliases: getZstats_FA

### ** Examples

d1 <- simu_enrich_trial(n = 600, prop_S = 0.5, duration = 20)
d2 <- simu_enrich_trial(n = 100, prop_S = 0.5, duration = 20)
getZstats_FA(d1, d2, targetEvents = c(210, 280, 420), expand=0)



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("getZstats_FA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("getZstats_IA")
### * getZstats_IA

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: getZstats_IA
### Title: Get test statistics for a given trial.
### Aliases: getZstats_IA

### ** Examples

d <- simu_enrich_trial(n = 600, prop_S = 0.5, duration = 20)
getZstats(d, targetEvents.Sc = 105)



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("getZstats_IA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("getZtests_AED")
### * getZtests_AED

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: getZtests_AED
### Title: Get adaptive enrichment design test statistics for a given
###   trial.
### Aliases: getZtests_AED

### ** Examples

d <- simu_enrich_trial(n = 200, prop_S = 0.5, duration = 10)
object <- getZstats(d, targetEvents.S = c(28, 70))
getZtests_AED(object)



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("getZtests_AED", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("getZtests_AED2")
### * getZtests_AED2

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: getZtests_AED2
### Title: Get adaptive enrichment design test statistics for a given
###   trial.
### Aliases: getZtests_AED2

### ** Examples

d <- simu_enrich_trial(n = 200, prop_S = 0.5, duration = 10)
object <- getZstats(d, targetEvents.S = c(28, 70))
getZtests_AED2(object)



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("getZtests_AED2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("getZtests_BME")
### * getZtests_BME

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: getZtests_BME
### Title: Get adaptive enrichment design test statistics for a given
###   trial.
### Aliases: getZtests_BME

### ** Examples

d1 <- simu_enrich_trial(n = 600, prop_S = 0.5, duration = 20)
d2 <- simu_enrich_trial(n = 100, prop_S = 0.5, duration = 20)
zstats <- getZstats_FA(d1, d2, targetEvents = c(210, 280, 420), expand=0)
getZtests_BME(zstats, alpha1 = 0.0125, alpha2 = 0.0125)



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("getZtests_BME", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("getZtests_GSD")
### * getZtests_GSD

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: getZtests_GSD
### Title: Get group sequential design test statistics for a given trial.
### Aliases: getZtests_GSD

### ** Examples

d <- simu_enrich_trial(n = 200, prop_S = 0.5, duration = 10)
object <- getZstats(d, targetEvents.S = c(28, 70))
getZtests_GSD(object)



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("getZtests_GSD", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("hello")
### * hello

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: hello
### Title: Hello, World!
### Aliases: hello

### ** Examples

hello()



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("hello", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("logrank.one.sided")
### * logrank.one.sided

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: logrank.one.sided
### Title: Perform one-sided logrank test
### Aliases: logrank.one.sided

### ** Examples


n <- 100
time <- c(rexp(n, rate=log(2)/12), rexp(n, rate=log(2)/12*1.2))
event <- rep(1, n*2)
group <- c(rep(0, n), rep(1, n))
STRATA <- rep(c(0,1), n)

logrank.one.sided(time, event, group, STRATA)




base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("logrank.one.sided", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("simes")
### * simes

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: simes
### Title: Adjusted p value for testing H_J using Simes method
### Aliases: simes

### ** Examples

#Example (1):

p = c(0.01, 0.02, 0.03, 0.013)
simes(p)




base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("simes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("simu_enrich_trial")
### * simu_enrich_trial

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: simu_enrich_trial
### Title: Simulate an oncology trial with sub-population and full
###   population
### Aliases: simu_enrich_trial

### ** Examples

d <- simu_enrich_trial(n = 100, prop_S = 0.5, ratio = 1)
head(d)



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("simu_enrich_trial", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("simu_single_arm")
### * simu_single_arm

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: simu_single_arm
### Title: Simulate a single arm survival data with uniform enrollment
###   distribution
### Aliases: simu_single_arm

### ** Examples

d <- simu_single_arm(n = 20, duration = 5)
head(d)



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("simu_single_arm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
### * <FOOTER>
###
cleanEx()
options(digits = 7L)
base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
grDevices::dev.off()
###
### Local variables: ***
### mode: outline-minor ***
### outline-regexp: "\\(> \\)?### [*]+" ***
### End: ***
quit('no')
