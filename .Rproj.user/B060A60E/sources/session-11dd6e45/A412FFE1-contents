---
output:
  html_document: default
---
```{r}
rm(list=ls())
library(devtools)
library(knitr)
library(gsDesign)
library(dplyr)
library(rpact)
library(ggplot2)
library(ggh4x)
library(ggpubr)
library(scales)
library(parallel)
library(doParallel)
library(survival)
library(parallel)
library(BME)
library(rpact)
```


```{r}
seed <- 202506
nclust <- 10
nsim_per_cluster <- 10000 # set at least 1000 for final report
pr <- 0.5
alpha <- 0.025
medS_con <- 10
medSc_con <- 9
accrual_duration <- 20
IF <- 0.5
nS <- 300
nF <- 600
nSc <- nF - nS
hrS <- 0.7
hrSc <- 0.85
maturity <- 0.7
(targetEvents_S <- c(nS*maturity*IF, nS*maturity))
```

# get thresholds
```{r thresholds}
(hrF <- exp(pr*log(hrS)+(1-pr)*log(hrSc))) # HR for F
# find the thresholds
thresholds <- getDesignParameters(
  n = nF, prop_S = pr, duration = accrual_duration, targetEvents.S = targetEvents_S, 
  CP.Sc.threshold = 0.2, CP.S.threshold = 0.8, CP.F.threshold = 0.8, 
  hazard_S = log(2)/c(medS_con, medS_con/hrS), hazard_Sc = log(2)/c(medSc_con, medSc_con/hrSc), 
  dropout_S = c(0, 0), dropout_Sc = c(0, 0), ratio = 1, alpha = alpha)
(HR.S.threshold <- thresholds$HR.S.threshold)
(HR.F.threshold <- thresholds$HR.F.threshold)
(HR.Sc.threshold <- thresholds$HR.Sc.threshold)
```

# generate data
```{r generate data}
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)  %>% arrange(enterTime)
dat_additional <- simu_enrich_trial(n = 200, prop_S = 0.5, ratio = 1, duration = 3) %>% 
  filter(subgroup == 1) %>%
  dplyr::mutate(enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20) %>% arrange(enterTime)

```


# IA
```{r IA}
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))

C <- 0.9
(expand <- zstats_IA$hr.Sc.IA < C)
```

# FA
```{r}
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
```

# hypothesis tests
```{r}
getZtests_BME(zstats_FA, alpha1 = 0.0125, alpha2 = 0.0125)
```
```{r}
res <- getOC_BME(seed = 2025, nsim = 10, nF = 600, nS_additional = 100,  prop_S = 0.5,
                  duration = 20, duration_additional = 3,
                  targetEvents.Sc = 105,  targetEvents = c(210, 280, 420),
                  HR.Sc.threshold = 0.9,
                  hazard_S = c(0.7, 0.7), hazard_Sc = c(0.8, 0.8),
                  dropout_S = c(0, 0), dropout_Sc = c(0, 0), w = 1, ratio = 1,
                  alpha1 = 0.0125, alpha2 = 0.0125)

res
```

# Simulation 
```{r}
# Define hazard ratios 
HRs <- cbind(
  hrS = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
  hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)

# results matrix
results <- matrix(NA, nrow = nrow(HRs), ncol = 5)
colnames(results) <- c("Power F", "Power S", "Overall Power", "Probability of Expansion", "Average Sample Size")

# Loop over scenarios
for (i in 1:nrow(HRs)) {
  res <- getOC_BME(
    seed = 2025,
    nsim = 50,
    nF = 600,
    nS_additional = 100,
    prop_S = 0.5,
    duration = 20,
    duration_additional = 3,
    targetEvents.Sc = 105,
    targetEvents = c(210, 280, 420),
    HR.Sc.threshold = 0.9,
    hazard_S  = log(2)/c(9, 9 / HRs[i, "hrS"]),
    hazard_Sc = log(2)/c(9, 9 / HRs[i, "hrSc"]),
    dropout_S = c(0, 0),
    dropout_Sc = c(0, 0),
    w = 1,
    ratio = 1,
    alpha1 = 0.0125,
    alpha2 = 0.0125
  )

    # Extract statistics
    power.Fs <- res$F.reject
    power.Ss <- res$S.reject
    expansion <- res$expand
    
    # Store results
    results[i, ] <- c(
    mean(power.Fs),
    mean(power.Ss),
    mean(power.Fs | power.Ss),
    mean(expansion),
    600 + 100 * mean(expansion)
  )
}

results_df <- as.data.frame(cbind(HRs, results))
print(results_df)

```


# Loop in parallel
```{r}
HRs <- cbind(
  hrS = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
  hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)

simulate_scenario <- function(i, HRs) {
  # currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
  hazard_S  <- log(2)/c(9, 9 / HRs[i, "hrS"])
  hazard_Sc <- log(2)/c(9, 9 / HRs[i, "hrSc"])
  
  res <- getOC_BME(
    seed = 2025 + i, #make sure scenarios are statistically independent 
    nsim = 5000,
    nF = 600,
    nS_additional = 100,
    prop_S = 0.5,
    duration = 20,
    duration_additional = 3,
    targetEvents.Sc = 105,
    targetEvents = c(210, 280, 420),
    HR.Sc.threshold = 0.9,
    hazard_S  = hazard_S,
    hazard_Sc = hazard_Sc,
    dropout_S = c(0, 0),
    dropout_Sc = c(0, 0),
    w = 1,
    ratio = 1,
    alpha1 = 0.0125,
    alpha2 = 0.0125
  )
  
  power.Fs <- res$F.reject
  power.Ss <- res$S.reject
  expansion <- res$expand
  
  return(c(
    Power_F = mean(power.Fs),
    Power_S = mean(power.Ss),
    Overall_Power = mean(power.Fs | power.Ss),
    Prob_Expand = mean(expansion),
    Avg_Sample_Size = 600 + 100 * mean(expansion)
  ))
}

# Setup parallel cluster
n_cores <- detectCores() - 1
cl <- makeCluster(n_cores)

clusterExport(cl, varlist = c("HRs", "getOC_BME", "simulate_scenario", "log"))

# simulation
results_list <- parLapply(cl, 1:nrow(HRs), function(i) simulate_scenario(i, HRs))

# Stop cluster
stopCluster(cl)

results <- do.call(rbind, results_list)
results_df <- as.data.frame(cbind(HRs, results))

print(results_df)
```
# BME+no GSD survival
```{r}
alpha1 <- 0.0125
alpha2 <- 0.0125

HRs <- cbind(
  hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
  hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)

delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)

simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {

  # currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
  hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
  hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
  
  orr_S <- c(0.2, 0.2 + delta_orr_S[i])
  orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
  
  res <- getOC_BME(
  seed = 2025 + i,   # make sure scenarios are statistically independent
  nsim = 10000,
  nF = 600, nS_additional = 100,
  prop_S = 0.5,
  duration = 20,
  duration_additional = 3,
  targetEvents.Sc = 105, 
  targetEvents = c(210, 280, 420),
  HR.Sc.threshold = 0.9,
  hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
  dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
  orr_S = orr_S,
  orr_Sc = orr_Sc,
  rho_S = 0.7, rho_Sc = 0.7,
  alpha1 = alpha1, alpha2 = alpha2,
  selection = "survival",
  orr_thres = 0.01,
  orr_number = 200
)
  power.Fs <- res$F.reject
  power.Ss <- res$S.reject
  expansion <- res$expand
  timing.IAs <- res$timing.IA
  timing.Fs <- res$timing.F
  timing.Ss <- res$timing.S
  
  return(c(
    Power_F = mean(power.Fs),
    Power_S = mean(power.Ss),
    Overall_Power = mean(power.Fs | power.Ss),
    Prob_Expand = mean(expansion),
    Avg_Sample_Size = 600 + 100 * mean(expansion),
    Timing_IA = mean(timing.IAs),
    Timing_S = mean(timing.Ss),
    Timing_F = mean(timing.Fs)
  ))

}


n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)

clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
                    "simulate_scenario",  
                    "getZstats_IA", "getZstats_FA",
                    "getZtests_BME", "getOC_BME",
                    "simu_enrich_trial", "cut_by_event",
                    "logrank.one.sided", "log"))

results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))


stopCluster(cl)

results_df <- as.data.frame(cbind(HRs,
                                  do.call(rbind, results_list)))


print(round(results_df, 4))
```

# BME+no GSD ORR rho=0.7
```{r}
alpha1 <- 0.0125
alpha2 <- 0.0125

HRs <- cbind(
  hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
  hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)

delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)

simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {

  # currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
  hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
  hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
  
  orr_S <- c(0.2, 0.2 + delta_orr_S[i])
  orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])

  res <- getOC_BME(
  seed = 2025 + i,   # make sure scenarios are statistically independent
  nsim = 10000,
  nF = 600, nS_additional = 100,
  prop_S = 0.5,
  duration = 20,
  duration_additional = 3,
  targetEvents.Sc = 105, 
  targetEvents = c(210, 280, 420),
  HR.Sc.threshold = 0.9,
  hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
  dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
  orr_S = orr_S,
  orr_Sc = orr_Sc,
  rho_S = 0.7, rho_Sc = 0.7,
  alpha1 = alpha1, alpha2 = alpha2,
  selection = "orr",
  orr_thres = 0.1,
  orr_number = 200
)
  power.Fs <- res$F.reject
  power.Ss <- res$S.reject
  expansion <- res$expand
  timing.IAs <- res$timing.IA
  timing.Fs <- res$timing.F
  timing.Ss <- res$timing.S
  
  return(c(
    orr_S = orr_S[2],
    orr_Sc = orr_Sc[2],
    Power_F = mean(power.Fs),
    Power_S = mean(power.Ss),
    Overall_Power = mean(power.Fs | power.Ss),
    Prob_Expand = mean(expansion),
    Avg_Sample_Size = 600 + 100 * mean(expansion),
    Timing_IA = mean(timing.IAs),
    Timing_S = mean(timing.Ss),
    Timing_F = mean(timing.Fs)
  ))

}


n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)

clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
                    "simulate_scenario",  
                    "getZstats_IA", "getZstats_FA",
                    "getZtests_BME", "getOC_BME",
                    "simu_enrich_trial", "cut_by_event",
                    "logrank.one.sided", "log"))

results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))


stopCluster(cl)

results_df <- as.data.frame(cbind(HRs,
                                  do.call(rbind, results_list)))


print(round(results_df, 4))
```


# BME+no GSD ORR different assumptions
```{r}
alpha1 <- 0.0125
alpha2 <- 0.0125

HRs <- cbind(
  hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
  hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)

delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.25, 0.30, 0.35, 0.4, 0.4)

simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {

  # currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
  hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
  hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
  
  orr_S <- c(0.2, 0.2 + delta_orr_S[i])
  orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])

  res <- getOC_BME(
  seed = 2025 + i,   # make sure scenarios are statistically independent
  nsim = 10000,
  nF = 600, nS_additional = 100,
  prop_S = 0.5,
  duration = 20,
  duration_additional = 3,
  targetEvents.Sc = 105, 
  targetEvents = c(210, 280, 420),
  HR.Sc.threshold = 0.9,
  hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
  dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
  orr_S = orr_S,
  orr_Sc = orr_Sc,
  rho_S = 0.7, rho_Sc = 0.7,
  alpha1 = alpha1, alpha2 = alpha2,
  selection = "orr",
  orr_thres = 0.1,
  orr_number = 200
)
  power.Fs <- res$F.reject
  power.Ss <- res$S.reject
  expansion <- res$expand
  timing.IAs <- res$timing.IA
  timing.Fs <- res$timing.F
  timing.Ss <- res$timing.S
  
  return(c(
    orr_S = orr_S[2],
    orr_Sc = orr_Sc[2],
    Power_F = mean(power.Fs),
    Power_S = mean(power.Ss),
    Overall_Power = mean(power.Fs | power.Ss),
    Prob_Expand = mean(expansion),
    Avg_Sample_Size = 600 + 100 * mean(expansion),
    Timing_IA = mean(timing.IAs),
    Timing_S = mean(timing.Ss),
    Timing_F = mean(timing.Fs)
  ))

}


n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)

clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
                    "simulate_scenario",  
                    "getZstats_IA", "getZstats_FA",
                    "getZtests_BME", "getOC_BME",
                    "simu_enrich_trial", "cut_by_event",
                    "logrank.one.sided", "log"))

results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))


stopCluster(cl)

results_df <- as.data.frame(cbind(HRs,
                                  do.call(rbind, results_list)))


print(round(results_df, 4))
```



# Add group sequential method
## example
```{r}
library(rpact)

# create group sequential designs for both
design_S <- getDesignGroupSequential(kMax = 2, alpha = 0.0125, informationRates = c(5/7, 1))
design_F <- getDesignGroupSequential(kMax = 3, alpha = 0.0125, informationRates = c(0.33, 0.67, 1))

# Define Group Sequential Boundaries
design_S
```
```{r}
# Subgroup
dat_S <- subset(dat_initial, subgroup == 1)
design_S <- getDesignGroupSequential(kMax = 2, alpha = 0.0125, informationRates = c(5/7, 1))
design_S$criticalValues

(Zstat <- getZstats_GS(dat = dat_S, targetEvents = c(150,210)))
(Ztest <- getZtest_GS(Zstat, design_S))
```


```{r}
res <- getOC_BME_GS(seed = 2025, nsim = 10, nF = 600, nS_additional = 100,  prop_S = 0.5,
                    duration = 20, duration_additional = 3,
                    targetEvents.Sc = 105, HR.Sc.threshold = 0.9,
                    targetEvents.S.noexpand = c(150, 210),
                    targetEvents.S.expand = c(200, 280),
                    targetEvents.F = c(300, 420),
                    design_S_noexpand = design_S_noexpand,
                    design_S_expand = design_S_expand,
                    design_F = design_F,
                    hazard_S = c(0.7, 0.7), hazard_Sc = c(0.8, 0.8),
                    dropout_S = c(0, 0), dropout_Sc = c(0, 0), w = 1, ratio = 1,
                    orr_S = 0.2, orr_Sc = 0.2, rho_S = 0.7, rho_Sc = 0.7,
                    alpha1 = 0.0125, alpha2 = 0.0125,
                    selection = "orr",
                    orr_thres = 0.001, orr_number = 200)
res
```

# BME+GSD survival
```{r}
# Get GSD
library(rpact)
targetEvents.S.noexpand <- c(150, 210)
targetEvents.S.expand <- c(200, 280)
targetEvents.F <- c(300, 420)

alpha1 <- 0.0125
alpha2 <- 0.0125

design_S_noexpand <- getDesignGroupSequential(kMax = length(targetEvents.S.noexpand), alpha = alpha1, informationRates = targetEvents.S.noexpand / max(targetEvents.S.noexpand))
design_S_expand <- getDesignGroupSequential(kMax = length(targetEvents.S.expand), alpha = alpha1, informationRates = targetEvents.S.expand / max(targetEvents.S.expand))
design_F <- getDesignGroupSequential(kMax = length(targetEvents.F), alpha = alpha2, informationRates = targetEvents.F / max(targetEvents.F))
```

```{r}
HRs <- cbind(
  hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
  hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)

delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)


simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc){

  # currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
  hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
  hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
    
  orr_S <- c(0.2, 0.2 + delta_orr_S[i])
  orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])

  res <- getOC_BME_GS(
  seed = 2025 + i,   # make sure scenarios are statistically independent
  nsim = 10000,
  nF = 600, nS_additional = 100,
  prop_S = 0.5,
  duration = 20,
  duration_additional = 3,
  targetEvents.Sc = 105, 
  HR.Sc.threshold = 0.9,
  targetEvents.S.noexpand = targetEvents.S.noexpand,
  targetEvents.S.expand = targetEvents.S.expand,
  targetEvents.F  = targetEvents.F,
  design_S_noexpand = design_S_noexpand,
  design_S_expand = design_S_expand,
  design_F = design_F,
  hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
  dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
  orr_S = orr_S,
  orr_Sc = orr_Sc,
  rho_S = 0.7, rho_Sc = 0.7,
  alpha1 = alpha1, alpha2 = alpha2,
  selection = "survival",
  orr_thres = 0.1,
  orr_number = 200
)
  power.Fs <- res$F.reject
  power.Ss <- res$S.reject
  expansion <- res$expand
  timing.IAs <- res$timing.IA
  timing.Fs <- res$timing.F
  timing.Ss <- res$timing.S
  
  return(c(
    Power_F = mean(power.Fs),
    Power_S = mean(power.Ss),
    Overall_Power = mean(power.Fs | power.Ss),
    Prob_Expand = mean(expansion),
    Avg_Sample_Size = 600 + 100 * mean(expansion),
    Timing_IA = mean(timing.IAs),
    Timing_S = mean(timing.Ss),
    Timing_F = mean(timing.Fs)
  ))

}


n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)

clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
                    "simulate_scenario",
                    "getOC_BME_GS", "getZtest_GS",
                    "getZstats_GS", "getZstats_IA",
                    "simu_enrich_trial", "cut_by_event",
                    "logrank.one.sided", "log"))

results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))


stopCluster(cl)

results_df <- as.data.frame(cbind(HRs,
                                  do.call(rbind, results_list)))

print(round(results_df, 4))
```

# Get target events
```{r}
library(rpact)

design <- getDesignGroupSequential(kMax = 2, alpha = 0.0125, informationRates=c(5/7, 1))

result <- getSampleSizeSurvival(
  design = design,
  hazardRatio = 0.7,
  allocationRatioPlanned = 1,
  median1 = 9,
  median2 = 9,
  accrualTime = c(0, 20),
  accrualIntensity = 0.1,
#  followUpTime = 3,
  dropoutRate1 = 0,
  dropoutRate2 = 0,
  maxNumberOfSubjects = 600
)

result
```


# BME+GSD orr

```{r}
# Get GSD
library(rpact)
targetEvents.S.noexpand <- c(150, 210)
targetEvents.S.expand <- c(200, 280)
targetEvents.F <- c(300, 420)

alpha1 <- 0.0125
alpha2 <- 0.0125

design_S_noexpand <- getDesignGroupSequential(kMax = length(targetEvents.S.noexpand), alpha = alpha1, informationRates = targetEvents.S.noexpand / max(targetEvents.S.noexpand))
design_S_expand <- getDesignGroupSequential(kMax = length(targetEvents.S.expand), alpha = alpha1, informationRates = targetEvents.S.expand / max(targetEvents.S.expand))
design_F <- getDesignGroupSequential(kMax = length(targetEvents.F), alpha = alpha2, informationRates = targetEvents.F / max(targetEvents.F))
```

```{r}
HRs <- cbind(
  hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
  hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)

delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)


simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {
  
  # currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
  hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
  hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
  
  orr_S <- c(0.2, 0.2 + delta_orr_S[i])
  orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])

  res <- getOC_BME_GS(
  seed  = 2025 + i,   # make sure scenarios are statistically independent
  nsim = 10000,
  nF = 600, nS_additional = 100,
  prop_S = 0.5,
  duration = 20,
  duration_additional = 3,
  targetEvents.Sc = 105, 
  HR.Sc.threshold = 0.9,
  targetEvents.S.noexpand = targetEvents.S.noexpand,
  targetEvents.S.expand = targetEvents.S.expand,
  targetEvents.F  = targetEvents.F,
  design_S_noexpand = design_S_noexpand,
  design_S_expand = design_S_expand,
  design_F = design_F,
  hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
  dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
  orr_S  = orr_S,
  orr_Sc = orr_Sc,
  rho_S = 0.7, rho_Sc = 0.7,
  alpha1 = alpha1, alpha2 = alpha2,
  selection = "orr",
  orr_thres  = 0.1,
  orr_number = 200
)
  power.Fs <- res$F.reject
  power.Ss <- res$S.reject
  expansion <- res$expand
  timing.IAs <- res$timing.IA
  timing.Fs <- res$timing.F
  timing.Ss <- res$timing.S
  
  return(c(
    orr_S = orr_S[2],
    orr_Sc = orr_Sc[2],
    Power_F = mean(power.Fs),
    Power_S = mean(power.Ss),
    Overall_Power = mean(power.Fs | power.Ss),
    Prob_Expand = mean(expansion),
    Avg_Sample_Size = 600 + 100 * mean(expansion),
    Timing_IA = mean(timing.IAs),
    Timing_S_expand = mean(timing.Ss[expansion == 1]),
    Timing_S_noexpand = mean(timing.Ss[expansion == 0]),
    Timing_S = mean(timing.Ss),
    Timing_F = mean(timing.Fs)
  ))

}


n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)

clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
                    "simulate_scenario",
                    "getOC_BME_GS", "getZtest_GS",
                    "getZstats_GS", "getZstats_IA",
                    "simu_enrich_trial", "cut_by_event",
                    "logrank.one.sided", "log"))

results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))


stopCluster(cl)

results_df <- as.data.frame(cbind(HRs, 
                                  do.call(rbind, results_list)))


print(round(results_df, 4))
```

# increase BM+ sample size: 300+200
```{r}
# Get GSD
library(rpact)
targetEvents.S.noexpand <- c(150, 210)
targetEvents.S.expand <- c(200, 350)
targetEvents.F <- c(300, 420)

alpha1 <- 0.0125
alpha2 <- 0.0125

design_S_noexpand <- getDesignGroupSequential(kMax = length(targetEvents.S.noexpand), alpha = alpha1, informationRates = targetEvents.S.noexpand / max(targetEvents.S.noexpand))
design_S_expand <- getDesignGroupSequential(kMax = length(targetEvents.S.expand), alpha = alpha1, informationRates = targetEvents.S.expand / max(targetEvents.S.expand))
design_F <- getDesignGroupSequential(kMax = length(targetEvents.F), alpha = alpha2, informationRates = targetEvents.F / max(targetEvents.F))
```

```{r}
HRs <- cbind(
  hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
  hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)

delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)


simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {
  
  # currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
  hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
  hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
  
  orr_S <- c(0.2, 0.2 + delta_orr_S[i])
  orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])

  res <- getOC_BME_GS(
  seed  = 2025 + i,   # make sure scenarios are statistically independent
  nsim = 10000,
  nF = 600, nS_additional = 200,
  prop_S = 0.5,
  duration = 20,
  duration_additional = 6,
  targetEvents.Sc = 105, 
  HR.Sc.threshold = 0.9,
  targetEvents.S.noexpand = targetEvents.S.noexpand,
  targetEvents.S.expand = targetEvents.S.expand,
  targetEvents.F  = targetEvents.F,
  design_S_noexpand = design_S_noexpand,
  design_S_expand = design_S_expand,
  design_F = design_F,
  hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
  dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
  orr_S  = orr_S,
  orr_Sc = orr_Sc,
  rho_S = 0.7, rho_Sc = 0.7,
  alpha1 = alpha1, alpha2 = alpha2,
  selection = "orr",
  orr_thres  = 0.1,
  orr_number = 200
)
  power.Fs <- res$F.reject
  power.Ss <- res$S.reject
  expansion <- res$expand
  timing.IAs <- res$timing.IA
  timing.Fs <- res$timing.F
  timing.Ss <- res$timing.S
  
  return(c(
    orr_S = orr_S[2],
    orr_Sc = orr_Sc[2],
    Power_F = mean(power.Fs),
    Power_S = mean(power.Ss),
    Overall_Power = mean(power.Fs | power.Ss),
    Prob_Expand = mean(expansion),
    Avg_Sample_Size = 600 + 200 * mean(expansion),
    Timing_IA = mean(timing.IAs),
    Timing_S_expand = mean(timing.Ss[expansion == 1]),
    Timing_S_noexpand = mean(timing.Ss[expansion == 0]),
    Timing_S = mean(timing.Ss),
    Timing_F = mean(timing.Fs)
  ))

}


n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)

clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
                    "simulate_scenario",
                    "getOC_BME_GS", "getZtest_GS",
                    "getZstats_GS", "getZstats_IA",
                    "simu_enrich_trial", "cut_by_event",
                    "logrank.one.sided", "log"))

results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))


stopCluster(cl)

results_df <- as.data.frame(cbind(HRs, 
                                  do.call(rbind, results_list)))


print(round(results_df, 4))
```

```{r}
alpha1 <- 0.0125
alpha2 <- 0.0125

HRs <- cbind(
  hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
  hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)

delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)

simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {
  
  # currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
  hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
  hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
  
  orr_S <- c(0.2, 0.2 + delta_orr_S[i])
  orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])

  res <- getOC_data(seed = 2025+i, nsim = 10,
                    nF = 700, prop_S = 0.5,
                    duration = 23, hazard_S = hazard_S, hazard_Sc = hazard_Sc,
                    dropout_S = c(0, 0), dropout_Sc = c(0, 0),
                    w = 1, ratio = 1,
                    orr_S = orr_S, orr_Sc = orr_Sc,
                    rho_S = 0.7, rho_Sc = 0.7,
                    enroll_month = 17)
  
  enrolled_by_month <- mean(res)
  
  return(enrolled_by_month)

}


n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)

clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
                    "simulate_scenario",
                    "getOC_data",
                    "simu_enrich_trial", "cut_by_event",
                    "logrank.one.sided", "log"))

results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))


stopCluster(cl)

results_df <- as.data.frame(cbind(HRs, 
                                  do.call(rbind, results_list)))

print(results_df)
```

# Get power analysis
```{r}
library(rpact)

design <- getDesignGroupSequential(kMax = 2, informationRates = c(0.7, 1),  alpha = 0.0125)
power <- getPowerSurvival(
  design = design,
  maxNumberOfSubjects = 700,           
  maxNumberOfEvents = 490,    
  hazardRatio = 0.75, 
  median2 = 9,
  allocationRatioPlanned = 1,
  accrualTime = c(0, 23),
  accrualIntensity = 700/23,
  directionUpper = FALSE
)
power$overallReject
power$analysisTime

```
# increase sample size: 700+150 & add RNG stream
# BME+no GSD+PFS
```{r}
alpha1 <- 0.0125
alpha2 <- 0.0125

HRs <- cbind(
  hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
  hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)

delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)

simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {

  # currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
  hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
  hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
  
  orr_S <- c(0.2, 0.2 + delta_orr_S[i])
  orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
  
  res <- getOC_BME_bydate(
  nsim = 500,
  nF = 700, nS_additional = 150,
  prop_S = 0.5,
  duration = 23,
  duration_additional = 5,
  cutTime = 20, 
  targetEvents = c(245, 350, 490),
  HR.Sc.threshold = 0.9,
  hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
  dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
  orr_S = orr_S,
  orr_Sc = orr_Sc,
  rho_S = 0.7, rho_Sc = 0.7,
  alpha1 = alpha1, alpha2 = alpha2,
  selection = "survival",
  orr_thres = 0.1
)
  return(c(
    Power_F = mean(res$F.reject),
    Power_S = mean(res$S.reject),
    Overall_Power = mean(res$F.reject | res$S.reject),
    Prob_Expand = mean(res$expand),
    Avg_Sample_Size = 700 + 150 * mean(res$expand),
    Timing_S = mean(res$timing.S),
    Timing_F = mean(res$timing.F)
  ))

}


n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)

# Set up independent RNG streams
clusterSetRNGStream(cl, iseed = 2025)

clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
                    "simulate_scenario",  
                    "getZstats_IA_bydate", "getZstats_FA",
                    "getZtests_BME", "getOC_BME_bydate",
                    "simu_enrich_trial", "cut_by_event",
                    "logrank.one.sided", "log"))

results_list <- lapply(1:nrow(HRs), function(i) {
  simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc)
})

stopCluster(cl)

results_df <- as.data.frame(cbind(HRs,
                                  do.call(rbind, results_list)))


print(round(results_df, 4))
```


```{r}
n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)

# Set up parallel-safe RNG
clusterSetRNGStream(cl, iseed = 2025)

# Export EVERYTHING that simulate_scenario() and getOC_BME_bydate() depend on
clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
                    "alpha1", "alpha2",
                    "simulate_scenario",  
                    "getOC_BME_bydate", "getZstats_IA_bydate", "getZstats_FA",
                    "getZtests_BME", "simu_enrich_trial", "cut_by_event",
                    "logrank.one.sided", "log"))

# Run simulation
results_list <- parLapply(cl, 1:nrow(HRs), function(i) {
  simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc)
})

stopCluster(cl)
results_df <- as.data.frame(cbind(HRs, do.call(rbind, results_list)))
print(round(results_df, 4))

```

```{r}
try(stopCluster(cl), silent = TRUE)
rm(list = ls())
gc()

```

# BME+no GSD+ORR
```{r}
alpha1 <- 0.0125
alpha2 <- 0.0125

HRs <- cbind(
  hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
  hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)

delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)

simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {

  # currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
  hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
  hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
  
  orr_S <- c(0.2, 0.2 + delta_orr_S[i])
  orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
  
  res <- getOC_BME_bydate(
  seed = 2025 + i,   # make sure scenarios are statistically independent
  nsim = 10000,
  nF = 700, nS_additional = 150,
  prop_S = 0.5,
  duration = 23,
  duration_additional = 5,
  cutTime = 17, 
  targetEvents = c(245, 350, 490),
  HR.Sc.threshold = 0.9,
  hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
  dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
  orr_S = orr_S,
  orr_Sc = orr_Sc,
  rho_S = 0.7, rho_Sc = 0.7,
  alpha1 = alpha1, alpha2 = alpha2,
  selection = "orr",
  orr_thres = 0.1
)
  return(c(
    orr_S = orr_S[2],
    orr_Sc = orr_Sc[2],
    Power_F = mean(res$F.reject),
    Power_S = mean(res$S.reject),
    Overall_Power = mean(res$F.reject | res$S.reject),
    Prob_Expand = mean(res$expand),
    Avg_Sample_Size = 700 + 150 * mean(res$expand),
    Timing_S = mean(res$timing.S),
    Timing_F = mean(res$timing.F)
  ))

}


n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)

clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
                    "simulate_scenario",  
                    "getZstats_IA_bydate", "getZstats_FA",
                    "getZtests_BME", "getOC_BME_bydate",
                    "simu_enrich_trial", "cut_by_event",
                    "logrank.one.sided", "log"))

results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))


stopCluster(cl)

results_df <- as.data.frame(cbind(HRs,
                                  do.call(rbind, results_list)))


print(round(results_df, 4))
```

# BME+GSD+PFS
```{r}
library(rpact)
targetEvents.S.noexpand <- c(175, 245)
targetEvents.S.expand <- c(250,350)
targetEvents.F <- c(350, 490)

alpha1 <- 0.0125
alpha2 <- 0.0125

design_S_noexpand <- getDesignGroupSequential(kMax = length(targetEvents.S.noexpand), alpha = alpha1, informationRates = targetEvents.S.noexpand / max(targetEvents.S.noexpand))
design_S_expand <- getDesignGroupSequential(kMax = length(targetEvents.S.expand), alpha = alpha1, informationRates = targetEvents.S.expand / max(targetEvents.S.expand))
design_F <- getDesignGroupSequential(kMax = length(targetEvents.F), alpha = alpha2, informationRates = targetEvents.F / max(targetEvents.F))
```

```{r}
HRs <- cbind(
  hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
  hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)

delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)


simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc){

  # currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
  hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
  hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
    
  orr_S <- c(0.2, 0.2 + delta_orr_S[i])
  orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])

  res <- getOC_BME_GS_bydate(
  seed = 2025 + i,   # make sure scenarios are statistically independent
  nsim = 10000,
  nF = 700, nS_additional = 150,
  prop_S = 0.5,
  duration = 23,
  duration_additional = 5,
  cutTime = 20, 
  HR.Sc.threshold = 0.9,
  targetEvents.S.noexpand = targetEvents.S.noexpand,
  targetEvents.S.expand = targetEvents.S.expand,
  targetEvents.F  = targetEvents.F,
  design_S_noexpand = design_S_noexpand,
  design_S_expand = design_S_expand,
  design_F = design_F,
  hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
  dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
  orr_S = orr_S,
  orr_Sc = orr_Sc,
  rho_S = 0.7, rho_Sc = 0.7,
  alpha1 = alpha1, alpha2 = alpha2,
  selection = "survival",
  orr_thres = 0.1
)
  
  return(c(
    Power_F = mean(res$F.reject),
    Power_S = mean(res$S.reject),
    Overall_Power = mean(res$F.reject | res$S.reject),
    Prob_Expand = mean(res$expand),
    Avg_Sample_Size = 700 + 150 * mean(res$expand),
    GSD_1stTime_S = mean(res$GSD_1stTime_S),
    Timing_S = mean(res$timing.S),
    GSD_1stTime_F = mean(res$GSD_1stTime_F),
    Timing_F = mean(res$timing.F)
  ))

}


n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)

clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
                    "simulate_scenario",
                    "getOC_BME_GS_bydate", "getZtest_GS",
                    "getZstats_GS", "getZstats_IA_bydate",
                    "simu_enrich_trial", "cut_by_event",
                    "logrank.one.sided", "log"))

results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))


stopCluster(cl)

results_df <- as.data.frame(cbind(HRs,
                                  do.call(rbind, results_list)))

print(round(results_df, 4))
```


#BME+GSD+ORR
```{r}
library(rpact)
targetEvents.S.noexpand <- c(175, 245)
targetEvents.S.expand <- c(250,350)
targetEvents.F <- c(350, 490)

alpha1 <- 0.0125
alpha2 <- 0.0125

design_S_noexpand <- getDesignGroupSequential(kMax = length(targetEvents.S.noexpand), alpha = alpha1, informationRates = targetEvents.S.noexpand / max(targetEvents.S.noexpand))
design_S_expand <- getDesignGroupSequential(kMax = length(targetEvents.S.expand), alpha = alpha1, informationRates = targetEvents.S.expand / max(targetEvents.S.expand))
design_F <- getDesignGroupSequential(kMax = length(targetEvents.F), alpha = alpha2, informationRates = targetEvents.F / max(targetEvents.F))
```

```{r}
HRs <- cbind(
  hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
  hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)

delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)


simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc){

  # currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
  hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
  hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
    
  orr_S <- c(0.2, 0.2 + delta_orr_S[i])
  orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])

  res <- getOC_BME_GS_bydate(
  seed = 2025 + i,   # make sure scenarios are statistically independent
  nsim = 10000,
  nF = 700, nS_additional = 150,
  prop_S = 0.5,
  duration = 23,
  duration_additional = 5,
  cutTime = 17, 
  HR.Sc.threshold = 0.9,
  targetEvents.S.noexpand = targetEvents.S.noexpand,
  targetEvents.S.expand = targetEvents.S.expand,
  targetEvents.F  = targetEvents.F,
  design_S_noexpand = design_S_noexpand,
  design_S_expand = design_S_expand,
  design_F = design_F,
  hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
  dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
  orr_S = orr_S,
  orr_Sc = orr_Sc,
  rho_S = 0.7, rho_Sc = 0.7,
  alpha1 = alpha1, alpha2 = alpha2,
  selection = "orr",
  orr_thres = 0.1
)
  return(c(
    orr_S = orr_S[2],
    orr_Sc = orr_Sc[2],
    Power_F = mean(res$F.reject),
    Power_S = mean(res$S.reject),
    Overall_Power = mean(res$F.reject | res$S.reject),
    Prob_Expand = mean(res$expand),
    Avg_Sample_Size = 700 + 150 * mean(res$expand),
    GSD_1stTime_S = mean(res$GSD_1stTime_S),
    Timing_S = mean(res$timing.S),
    GSD_1stTime_F = mean(res$GSD_1stTime_F),
    Timing_F = mean(res$timing.F)
  ))

}


n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)

clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
                    "simulate_scenario",
                    "getOC_BME_GS_bydate", "getZtest_GS",
                    "getZstats_GS", "getZstats_IA_bydate",
                    "simu_enrich_trial", "cut_by_event",
                    "logrank.one.sided", "log"))

results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))


stopCluster(cl)

results_df <- as.data.frame(cbind(HRs,
                                  do.call(rbind, results_list)))

print(round(results_df, 4))
```

# Change prevalence rate to 70%
#BME+no GSD+PFS
```{r}
alpha1 <- 0.0125
alpha2 <- 0.0125

HRs <- cbind(
  hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
  hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)

delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)

simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {

  # currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
  hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
  hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
  
  orr_S <- c(0.2, 0.2 + delta_orr_S[i])
  orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
  
  res <- getOC_BME_bydate(
  seed = 2025 + i,   # make sure scenarios are statistically independent
  nsim = 10000,
  nF = 500, nS_additional = 150,
  prop_S = 0.7,
  duration = 17,
  duration_additional = 5,
  cutTime = 13, 
  targetEvents = c(245, 350, 350),
  HR.Sc.threshold = 0.9,
  hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
  dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
  orr_S = orr_S,
  orr_Sc = orr_Sc,
  rho_S = 0.7, rho_Sc = 0.7,
  alpha1 = alpha1, alpha2 = alpha2,
  selection = "survival",
  orr_thres = 0.1
)
  return(c(
    Power_F = mean(res$F.reject),
    Power_S = mean(res$S.reject),
    Overall_Power = mean(res$F.reject | res$S.reject),
    Prob_Expand = mean(res$expand),
    Avg_Sample_Size = 700 + 150 * mean(res$expand),
    Timing_S = mean(res$timing.S),
    Timing_F = mean(res$timing.F)
  ))

}


n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)

clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
                    "simulate_scenario",  
                    "getZstats_IA", "getZstats_FA",
                    "getZtests_BME", "getOC_BME",
                    "simu_enrich_trial", "cut_by_event",
                    "logrank.one.sided", "log"))

results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))


stopCluster(cl)

results_df <- as.data.frame(cbind(HRs,
                                  do.call(rbind, results_list)))


print(round(results_df, 4))
```
#BME+no GSD+ORR
```{r}
alpha1 <- 0.0125
alpha2 <- 0.0125

HRs <- cbind(
  hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
  hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)

delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)

simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {

  # currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
  hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
  hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
  
  orr_S <- c(0.2, 0.2 + delta_orr_S[i])
  orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
  
  res <- getOC_BME_bydate(
  seed = 2025 + i,   # make sure scenarios are statistically independent
  nsim = 10000,
  nF = 500, nS_additional = 150,
  prop_S = 0.7,
  duration = 17,
  duration_additional = 5,
  cutTime = 11, 
  targetEvents = c(245, 350, 350),
  HR.Sc.threshold = 0.9,
  hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
  dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
  orr_S = orr_S,
  orr_Sc = orr_Sc,
  rho_S = 0.7, rho_Sc = 0.7,
  alpha1 = alpha1, alpha2 = alpha2,
  selection = "orr",
  orr_thres = 0.1
)
  return(c(
    orr_S = orr_S[2],
    orr_Sc = orr_Sc[2],
    Power_F = mean(res$F.reject),
    Power_S = mean(res$S.reject),
    Overall_Power = mean(res$F.reject | res$S.reject),
    Prob_Expand = mean(res$expand),
    Avg_Sample_Size = 700 + 150 * mean(res$expand),
    Timing_S = mean(res$timing.S),
    Timing_F = mean(res$timing.F)
  ))

}


n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)

clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
                    "simulate_scenario",  
                    "getZstats_IA", "getZstats_FA",
                    "getZtests_BME", "getOC_BME",
                    "simu_enrich_trial", "cut_by_event",
                    "logrank.one.sided", "log"))

results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))


stopCluster(cl)

results_df <- as.data.frame(cbind(HRs,
                                  do.call(rbind, results_list)))


print(round(results_df, 4))
```



# BME+GSD+PFS
```{r}
library(rpact)
targetEvents.S.noexpand <- c(175, 245)
targetEvents.S.expand <- c(250,350)
targetEvents.F <- c(250, 350)

alpha1 <- 0.0125
alpha2 <- 0.0125

design_S_noexpand <- getDesignGroupSequential(kMax = length(targetEvents.S.noexpand), alpha = alpha1, informationRates = targetEvents.S.noexpand / max(targetEvents.S.noexpand))
design_S_expand <- getDesignGroupSequential(kMax = length(targetEvents.S.expand), alpha = alpha1, informationRates = targetEvents.S.expand / max(targetEvents.S.expand))
design_F <- getDesignGroupSequential(kMax = length(targetEvents.F), alpha = alpha2, informationRates = targetEvents.F / max(targetEvents.F))
```

```{r}
HRs <- cbind(
  hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
  hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)

delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)


simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc){

  # currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
  hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
  hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
    
  orr_S <- c(0.2, 0.2 + delta_orr_S[i])
  orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])

  res <- getOC_BME_GS_bydate(
  seed = 2025 + i,   # make sure scenarios are statistically independent
  nsim = 10000,
  nF = 500, nS_additional = 150,
  prop_S = 0.7,
  duration = 17,
  duration_additional = 5,
  cutTime = 13, 
  HR.Sc.threshold = 0.9,
  targetEvents.S.noexpand = targetEvents.S.noexpand,
  targetEvents.S.expand = targetEvents.S.expand,
  targetEvents.F  = targetEvents.F,
  design_S_noexpand = design_S_noexpand,
  design_S_expand = design_S_expand,
  design_F = design_F,
  hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
  dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
  orr_S = orr_S,
  orr_Sc = orr_Sc,
  rho_S = 0.7, rho_Sc = 0.7,
  alpha1 = alpha1, alpha2 = alpha2,
  selection = "survival",
  orr_thres = 0.1
)
  
  return(c(
    Power_F = mean(res$F.reject),
    Power_S = mean(res$S.reject),
    Overall_Power = mean(res$F.reject | res$S.reject),
    Prob_Expand = mean(res$expand),
    Avg_Sample_Size = 700 + 150 * mean(res$expand),
    GSD_1stTime_S = mean(res$GSD_1stTime_S),
    Timing_S = mean(res$timing.S),
    GSD_1stTime_F = mean(res$GSD_1stTime_F),
    Timing_F = mean(res$timing.F)
  ))

}


n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)

clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
                    "simulate_scenario",
                    "getOC_BME_GS_bydate", "getZtest_GS",
                    "getZstats_GS", "getZstats_IA_bydate",
                    "simu_enrich_trial", "cut_by_event",
                    "logrank.one.sided", "log"))

results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))


stopCluster(cl)

results_df <- as.data.frame(cbind(HRs,
                                  do.call(rbind, results_list)))

print(round(results_df, 4))
```



# BME+GSD+ORR
```{r}
library(rpact)
targetEvents.S.noexpand <- c(175, 245)
targetEvents.S.expand <- c(250,350)
targetEvents.F <- c(250, 350)

alpha1 <- 0.0125
alpha2 <- 0.0125

design_S_noexpand <- getDesignGroupSequential(kMax = length(targetEvents.S.noexpand), alpha = alpha1, informationRates = targetEvents.S.noexpand / max(targetEvents.S.noexpand))
design_S_expand <- getDesignGroupSequential(kMax = length(targetEvents.S.expand), alpha = alpha1, informationRates = targetEvents.S.expand / max(targetEvents.S.expand))
design_F <- getDesignGroupSequential(kMax = length(targetEvents.F), alpha = alpha2, informationRates = targetEvents.F / max(targetEvents.F))
```

```{r}
HRs <- cbind(
  hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
  hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)

delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)


simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc){

  # currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
  hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
  hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
    
  orr_S <- c(0.2, 0.2 + delta_orr_S[i])
  orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])

  res <- getOC_BME_GS_bydate(
  seed = 2025 + i,   # make sure scenarios are statistically independent
  nsim = 10000,
  nF = 500, nS_additional = 150,
  prop_S = 0.7,
  duration = 17,
  duration_additional = 5,
  cutTime = 11, 
  HR.Sc.threshold = 0.9,
  targetEvents.S.noexpand = targetEvents.S.noexpand,
  targetEvents.S.expand = targetEvents.S.expand,
  targetEvents.F  = targetEvents.F,
  design_S_noexpand = design_S_noexpand,
  design_S_expand = design_S_expand,
  design_F = design_F,
  hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
  dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
  orr_S = orr_S,
  orr_Sc = orr_Sc,
  rho_S = 0.7, rho_Sc = 0.7,
  alpha1 = alpha1, alpha2 = alpha2,
  selection = "orr",
  orr_thres = 0.1
)
  
  return(c(
    orr_S = orr_S[2],
    orr_Sc = orr_Sc[2],
    Power_F = mean(res$F.reject),
    Power_S = mean(res$S.reject),
    Overall_Power = mean(res$F.reject | res$S.reject),
    Prob_Expand = mean(res$expand),
    Avg_Sample_Size = 700 + 150 * mean(res$expand),
    GSD_1stTime_S = mean(res$GSD_1stTime_S),
    Timing_S = mean(res$timing.S),
    GSD_1stTime_F = mean(res$GSD_1stTime_F),
    Timing_F = mean(res$timing.F)
  ))

}


n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)

clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
                    "simulate_scenario",
                    "getOC_BME_GS_bydate", "getZtest_GS",
                    "getZstats_GS", "getZstats_IA_bydate",
                    "simu_enrich_trial", "cut_by_event",
                    "logrank.one.sided", "log"))

results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))


stopCluster(cl)

results_df <- as.data.frame(cbind(HRs,
                                  do.call(rbind, results_list)))

print(round(results_df, 4))
```


