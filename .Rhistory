"simu_enrich_trial", "cut_by_event",
"HRs", "delta_orr_S", "delta_orr_Sc",
"logrank.one.sided", "log"))
results_list <- parLapply(cl, 1:nrow(HRs),
function(i) {simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc)}
)
library(parallel)
testfun <- function(x) rnorm(1)
cl <- makeCluster(2)
clusterSetRNGStream(cl, 123)
result <- parLapply(cl, 1:4, testfun)
stopCluster(cl)
print(result)
clusterEvalQ(cl, args(getOC_BME_bydate))
clusterEvalQ(cl, args(getOC_BME_bydate))
rm(list=ls())
library(devtools)
library(knitr)
library(gsDesign)
rm(list=ls())
library(devtools)
library(knitr)
library(gsDesign)
library(dplyr)
library(rpact)
library(ggplot2)
library(ggh4x)
library(ggpubr)
library(scales)
library(parallel)
library(doParallel)
library(survival)
library(parallel)
library(BME)
library(rpact)
rm(list=ls())
library(devtools)
library(knitr)
library(gsDesign)
library(dplyr)
library(rpact)
library(ggplot2)
library(ggh4x)
library(ggpubr)
library(scales)
library(parallel)
library(doParallel)
library(survival)
library(parallel)
library(BME)
library(rpact)
devtools::load_all(".")
alpha1 <- 0.0125
alpha2 <- 0.0125
HRs <- cbind(
hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)
delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)
simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {
# currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
orr_S <- c(0.2, 0.2 + delta_orr_S[i])
orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
res <- getOC_BME_bydate(
nsim = 500,
nF = 700, nS_additional = 150,
prop_S = 0.5,
duration = 23,
duration_additional = 5,
cutTime = 20,
targetEvents = c(245, 350, 490),
HR.Sc.threshold = 0.9,
hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
orr_S = orr_S,
orr_Sc = orr_Sc,
rho_S = 0.7, rho_Sc = 0.7,
alpha1 = alpha1, alpha2 = alpha2,
selection = "survival",
orr_thres = 0.1
)
return(c(
Power_F = mean(res$F.reject),
Power_S = mean(res$S.reject),
Overall_Power = mean(res$F.reject | res$S.reject),
Prob_Expand = mean(res$expand),
Avg_Sample_Size = 700 + 150 * mean(res$expand),
Timing_S = mean(res$timing.S),
Timing_F = mean(res$timing.F)
))
}
n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)
# Set up independent RNG streams
clusterSetRNGStream(cl, iseed = 2025)
clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
"simulate_scenario",
"getZstats_IA_bydate", "getZstats_FA",
"getZtests_BME", "getOC_BME_bydate",
"simu_enrich_trial", "cut_by_event",
"logrank.one.sided", "log"))
results_list <- parLapply(cl, 1:nrow(HRs),
function(i) {simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc)}
)
devtools::load_all(".")
alpha1 <- 0.0125
alpha2 <- 0.0125
HRs <- cbind(
hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)
delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)
simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {
# currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
orr_S <- c(0.2, 0.2 + delta_orr_S[i])
orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
res <- getOC_BME_bydate(
nsim = 500,
nF = 700, nS_additional = 150,
prop_S = 0.5,
duration = 23,
duration_additional = 5,
cutTime = 20,
targetEvents = c(245, 350, 490),
HR.Sc.threshold = 0.9,
hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
orr_S = orr_S,
orr_Sc = orr_Sc,
rho_S = 0.7, rho_Sc = 0.7,
alpha1 = alpha1, alpha2 = alpha2,
selection = "survival",
orr_thres = 0.1
)
return(c(
Power_F = mean(res$F.reject),
Power_S = mean(res$S.reject),
Overall_Power = mean(res$F.reject | res$S.reject),
Prob_Expand = mean(res$expand),
Avg_Sample_Size = 700 + 150 * mean(res$expand),
Timing_S = mean(res$timing.S),
Timing_F = mean(res$timing.F)
))
}
n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)
# Set up independent RNG streams
clusterSetRNGStream(cl, iseed = 2025)
clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
"simulate_scenario",
"getZstats_IA_bydate", "getZstats_FA",
"getZtests_BME", "getOC_BME_bydate",
"simu_enrich_trial", "cut_by_event",
"logrank.one.sided", "log"))
results_list <- parLapply(cl, 1:nrow(HRs),
function(i) {simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc)}
)
n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)
# Set up parallel-safe RNG
clusterSetRNGStream(cl, iseed = 2025)
# Export EVERYTHING that simulate_scenario() and getOC_BME_bydate() depend on
clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
"alpha1", "alpha2",
"simulate_scenario",
"getOC_BME_bydate", "getZstats_IA_bydate", "getZstats_FA",
"getZtests_BME", "simu_enrich_trial", "cut_by_event",
"logrank.one.sided", "log"))
# Run simulation
results_list <- parLapply(cl, 1:nrow(HRs), function(i) {
simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc)
})
clusterEvalQ(cl, args(getOC_BME_bydate))
devtools::load_all(".")
n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)
# Set up parallel-safe RNG
clusterSetRNGStream(cl, iseed = 2025)
# Export EVERYTHING that simulate_scenario() and getOC_BME_bydate() depend on
clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
"alpha1", "alpha2",
"simulate_scenario",
"getOC_BME_bydate", "getZstats_IA_bydate", "getZstats_FA",
"getZtests_BME", "simu_enrich_trial", "cut_by_event",
"logrank.one.sided", "log"))
# Run simulation
results_list <- parLapply(cl, 1:nrow(HRs), function(i) {
simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc)
})
try(stopCluster(cl), silent = TRUE)
rm(list = ls())
gc()
devtools::load_all(".")
rm(list=ls())
library(devtools)
library(knitr)
library(gsDesign)
library(dplyr)
library(rpact)
library(ggplot2)
library(ggh4x)
library(ggpubr)
library(scales)
library(parallel)
library(doParallel)
library(survival)
library(parallel)
library(BME)
library(rpact)
rm(list=ls())
library(devtools)
library(knitr)
library(gsDesign)
library(dplyr)
library(rpact)
library(ggplot2)
library(ggh4x)
library(ggpubr)
library(scales)
library(parallel)
library(doParallel)
library(survival)
library(parallel)
library(BME)
library(rpact)
devtools::load_all(".")
alpha1 <- 0.0125
alpha2 <- 0.0125
HRs <- cbind(
hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)
delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)
simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {
# currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
orr_S <- c(0.2, 0.2 + delta_orr_S[i])
orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
res <- getOC_BME_bydate(
nsim = 500,
nF = 700, nS_additional = 150,
prop_S = 0.5,
duration = 23,
duration_additional = 5,
cutTime = 20,
targetEvents = c(245, 350, 490),
HR.Sc.threshold = 0.9,
hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
orr_S = orr_S,
orr_Sc = orr_Sc,
rho_S = 0.7, rho_Sc = 0.7,
alpha1 = alpha1, alpha2 = alpha2,
selection = "survival",
orr_thres = 0.1
)
return(c(
Power_F = mean(res$F.reject),
Power_S = mean(res$S.reject),
Overall_Power = mean(res$F.reject | res$S.reject),
Prob_Expand = mean(res$expand),
Avg_Sample_Size = 700 + 150 * mean(res$expand),
Timing_S = mean(res$timing.S),
Timing_F = mean(res$timing.F)
))
}
n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)
# Set up independent RNG streams
clusterSetRNGStream(cl, iseed = 2025)
clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
"simulate_scenario",
"getZstats_IA_bydate", "getZstats_FA",
"getZtests_BME", "getOC_BME_bydate",
"simu_enrich_trial", "cut_by_event",
"logrank.one.sided", "log"))
results_list <- parLapply(cl, 1:nrow(HRs),
function(i) {simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc)}
)
devtools::load_all(".")
alpha1 <- 0.0125
alpha2 <- 0.0125
HRs <- cbind(
hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)
delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)
simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {
# currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
orr_S <- c(0.2, 0.2 + delta_orr_S[i])
orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
res <- getOC_BME_bydate(
seed = 2025 + i,   # make sure scenarios are statistically independent
nsim = 10000,
nF = 700, nS_additional = 150,
prop_S = 0.5,
duration = 23,
duration_additional = 5,
cutTime = 17,
targetEvents = c(245, 350, 490),
HR.Sc.threshold = 0.9,
hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
orr_S = orr_S,
orr_Sc = orr_Sc,
rho_S = 0.7, rho_Sc = 0.7,
alpha1 = alpha1, alpha2 = alpha2,
selection = "orr",
orr_thres = 0.1
)
return(c(
orr_S = orr_S[2],
orr_Sc = orr_Sc[2],
Power_F = mean(res$F.reject),
Power_S = mean(res$S.reject),
Overall_Power = mean(res$F.reject | res$S.reject),
Prob_Expand = mean(res$expand),
Avg_Sample_Size = 700 + 150 * mean(res$expand),
Timing_S = mean(res$timing.S),
Timing_F = mean(res$timing.F)
))
}
n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)
clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
"simulate_scenario",
"getZstats_IA_bydate", "getZstats_FA",
"getZtests_BME", "getOC_BME_bydate",
"simu_enrich_trial", "cut_by_event",
"logrank.one.sided", "log"))
results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))
alpha1 <- 0.0125
alpha2 <- 0.0125
HRs <- cbind(
hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)
delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)
simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {
# currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
orr_S <- c(0.2, 0.2 + delta_orr_S[i])
orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
res <- getOC_BME_bydate(
nsim = 500,
nF = 700, nS_additional = 150,
prop_S = 0.5,
duration = 23,
duration_additional = 5,
cutTime = 20,
targetEvents = c(245, 350, 490),
HR.Sc.threshold = 0.9,
hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
orr_S = orr_S,
orr_Sc = orr_Sc,
rho_S = 0.7, rho_Sc = 0.7,
alpha1 = alpha1, alpha2 = alpha2,
selection = "survival",
orr_thres = 0.1
)
return(c(
Power_F = mean(res$F.reject),
Power_S = mean(res$S.reject),
Overall_Power = mean(res$F.reject | res$S.reject),
Prob_Expand = mean(res$expand),
Avg_Sample_Size = 700 + 150 * mean(res$expand),
Timing_S = mean(res$timing.S),
Timing_F = mean(res$timing.F)
))
}
n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)
# Set up independent RNG streams
clusterSetRNGStream(cl, iseed = 2025)
clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
"simulate_scenario",
"getZstats_IA_bydate", "getZstats_FA",
"getZtests_BME", "getOC_BME_bydate",
"simu_enrich_trial", "cut_by_event",
"logrank.one.sided", "log"))
results_list <- parLapply(cl, 1:nrow(HRs),
function(i) {simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc)}
)
devtools::load_all(".")
alpha1 <- 0.0125
alpha2 <- 0.0125
HRs <- cbind(
hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)
delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)
simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {
# currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
orr_S <- c(0.2, 0.2 + delta_orr_S[i])
orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
res <- getOC_BME_bydate(
nsim = 500,
nF = 700, nS_additional = 150,
prop_S = 0.5,
duration = 23,
duration_additional = 5,
cutTime = 20,
targetEvents = c(245, 350, 490),
HR.Sc.threshold = 0.9,
hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
orr_S = orr_S,
orr_Sc = orr_Sc,
rho_S = 0.7, rho_Sc = 0.7,
alpha1 = alpha1, alpha2 = alpha2,
selection = "survival",
orr_thres = 0.1
)
return(c(
Power_F = mean(res$F.reject),
Power_S = mean(res$S.reject),
Overall_Power = mean(res$F.reject | res$S.reject),
Prob_Expand = mean(res$expand),
Avg_Sample_Size = 700 + 150 * mean(res$expand),
Timing_S = mean(res$timing.S),
Timing_F = mean(res$timing.F)
))
}
n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)
# Set up independent RNG streams
clusterSetRNGStream(cl, iseed = 2025)
clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
"simulate_scenario",
"getZstats_IA_bydate", "getZstats_FA",
"getZtests_BME", "getOC_BME_bydate",
"simu_enrich_trial", "cut_by_event",
"logrank.one.sided", "log"))
results_list <- parLapply(cl, 1:nrow(HRs),
function(i) {simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc)}
)
alpha1 <- 0.0125
alpha2 <- 0.0125
HRs <- cbind(
hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)
delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)
simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {
# currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
orr_S <- c(0.2, 0.2 + delta_orr_S[i])
orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
res <- getOC_BME_bydate(
nsim = 500,
nF = 700, nS_additional = 150,
prop_S = 0.5,
duration = 23,
duration_additional = 5,
cutTime = 20,
targetEvents = c(245, 350, 490),
HR.Sc.threshold = 0.9,
hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
orr_S = orr_S,
orr_Sc = orr_Sc,
rho_S = 0.7, rho_Sc = 0.7,
alpha1 = alpha1, alpha2 = alpha2,
selection = "survival",
orr_thres = 0.1
)
return(c(
Power_F = mean(res$F.reject),
Power_S = mean(res$S.reject),
Overall_Power = mean(res$F.reject | res$S.reject),
Prob_Expand = mean(res$expand),
Avg_Sample_Size = 700 + 150 * mean(res$expand),
Timing_S = mean(res$timing.S),
Timing_F = mean(res$timing.F)
))
}
n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)
# Set up independent RNG streams
clusterSetRNGStream(cl, iseed = 2025)
clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
"simulate_scenario",
"getZstats_IA_bydate", "getZstats_FA",
"getZtests_BME", "getOC_BME_bydate",
"simu_enrich_trial", "cut_by_event",
"logrank.one.sided", "log"))
results_list <- lapply(1:nrow(HRs), function(i) {
simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc)
})
stopCluster(cl)
results_df <- as.data.frame(cbind(HRs,
do.call(rbind, results_list)))
print(round(results_df, 4))
