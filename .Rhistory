z.S[1] <- res$z # non-adjusted Z statistic
p.S[1] <- res$p
obsEvents.S[1] <- sum(res$obs)
nS <- nrow(d)
View(dS)
View(dF)
View(d)
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)  # 600 1:1
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, .before = .data$enterTime)
# 100 BM+
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
View(dat_initial)
View(dat_additional)
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)  # 600 1:1
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
# 100 BM+
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
View(dat_additional)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)  # 600 1:1
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
# 100 BM+
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
View(dat_full)
devtools::load_all(".")
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)  # 600 1:1
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
# 100 BM+
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)  # 600 1:1
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
# 100 BM+
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
devtools::load_all(".")
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)  # 600 1:1
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
# 100 BM+
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)  # 600 1:1
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
# 100 BM+
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)  # 600 1:1
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
# 100 BM+
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
targetEvents = c(210, 280, 420)
if (expand) {
dat <- bind_rows(dat_initial, dat_additional) %>% arrange(desc(subgroup))
targetEvents_new <- c(targetEvents[2], targetEvents[3])
} else {
dat <- dat_initial
targetEvents_new <- c(targetEvents[1], targetEvents[3])
}
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)  # 600 1:1
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
# 100 BM+
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)  # 600 1:1
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
# 100 BM+
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)  # 600 1:1
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
# 100 BM+
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)  # 600 1:1
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
# 100 BM+
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)  # 600 1:1
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
# 100 BM+
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)  # 600 1:1
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
# 100 BM+
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
targetEvents = c(210, 280, 420)
if (expand) {
dat <- bind_rows(dat_initial, dat_additional) %>% arrange(desc(subgroup))
targetEvents_new <- c(targetEvents[2], targetEvents[3])
} else {
dat <- dat_initial
targetEvents_new <- c(targetEvents[1], targetEvents[3])
}
dS <- dat %>% filter(.data$subgroup==1)
dSc <- dat %>% filter(.data$subgroup==0)
dF <- dat_initial
## initial results
z.S <- z.F <- rep(NA, 2) # z-statistics
p.S <- p.F <- rep(NA, 2) # p-values
obsEvents.S <- obsEvents.F <- rep(NA, 2) # observed number of events
## cut data at FA when S reaches certain percent
# population S
d <- cut_by_event(dS, targetEvents = targetEvents_new[1])
FA_time_S <- d$calendarCutoff[1]
res <- logrank.one.sided(time = d$survTimeCut, event = d$eventCut,
group = d$trt, STRATA = NULL)
z.S[1] <- res$z # non-adjusted Z statistic
p.S[1] <- res$p
obsEvents.S[1] <- sum(res$obs)
nS <- nrow(d)
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
devtools::load_all(".")
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
devtools::load_all(".")
devtools::load_all(".")
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
devtools::load_all(".")
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
cut_by_event1 <- function(data, targetEvents) {
data0 <- data[order(data$calendarTime), ]  # sort by calendar time
# Get only event rows (event == 1)
event_data <- data0[data0$event == 1, ]
# Check if enough events
if (nrow(event_data) < targetEvents) stop("Not enough events in the dataset.")
# Identify the cutoff calendar time where the Nth event occurs
cutoff_time <- event_data$calendarTime[targetEvents]
# Apply cutoff
data0$survTimeCut <- ifelse(
data0$calendarTime <= cutoff_time,
data0$survTime,
cutoff_time - data0$enterTime
)
data0$eventCut <- ifelse(
data0$calendarTime <= cutoff_time,
data0$event,
0
)
data0$calendarCutoff <- cutoff_time
# Return all data (including censored after cutoff)
return(data0)
}
d <- cut_by_event(dS, targetEvents = 280)
sum(d$eventCut)  # should return 280
devtools::load_all(".")
devtools::load_all(".")
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
devtools::load_all(".")
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
library(BME)
d <- cut_by_event_new(dS, targetEvents = 280)
devtools::load_all(".")
devtools::load_all(".")
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
d <- cut_by_event_new(dS, targetEvents = 280)
sum(d$eventCut)  # should return 280
View(d)
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
targetEvents = c(210, 280, 420)
if (expand) {
dat <- bind_rows(dat_initial, dat_additional) %>% arrange(desc(subgroup))
targetEvents_new <- c(targetEvents[2], targetEvents[3])
} else {
dat <- dat_initial
targetEvents_new <- c(targetEvents[1], targetEvents[3])
}
dS <- dat %>% filter(.data$subgroup==1)
dSc <- dat %>% filter(.data$subgroup==0)
dF <- dat_initial
## initial results
z.S <- z.F <- rep(NA, 2) # z-statistics
p.S <- p.F <- rep(NA, 2) # p-values
obsEvents.S <- obsEvents.F <- rep(NA, 2) # observed number of events
## cut data at FA when S reaches certain percent
# population S
d <- cut_by_event(dS, targetEvents = targetEvents_new[1])
FA_time_S <- d$calendarCutoff[1]
res <- logrank.one.sided(time = d$survTimeCut, event = d$eventCut,
group = d$trt, STRATA = NULL)
z.S[1] <- res$z # non-adjusted Z statistic
p.S[1] <- res$p
obsEvents.S[1] <- sum(res$obs)
nS <- nrow(d)
View(dat)
View(d)
dS <- dat %>% filter(.data$subgroup==1)
dSc <- dat %>% filter(.data$subgroup==0)
dF <- dat_initial
## initial results
z.S <- z.F <- rep(NA, 2) # z-statistics
p.S <- p.F <- rep(NA, 2) # p-values
obsEvents.S <- obsEvents.F <- rep(NA, 2) # observed number of events
## cut data at FA when S reaches certain percent
# population S
d <- cut_by_event(dS, targetEvents = targetEvents_new[1])
FA_time_S <- d$calendarCutoff[1]
res <- logrank.one.sided(time = d$survTimeCut, event = d$eventCut,
group = d$trt, STRATA = NULL)
z.S[1] <- res$z # non-adjusted Z statistic
p.S[1] <- res$p
obsEvents.S[1] <- sum(d$eventCut)
nS <- nrow(d)
View(res)
devtools::load_all(".")
View(res)
logrank.one.sided(time = d$survTimeCut, event = d$eventCut,
group = d$trt, STRATA = NULL)
logrank.one.sided(time = d$survTimeCut, event = d$eventCut,
group = d$trt, STRATA = NULL)
res$obs
logrank.one.sided(time = d$survTimeCut, event = d$eventCut,
group = d$trt, STRATA = NULL)
d$eventCut
dS <- dat %>% filter(.data$subgroup==1)
dSc <- dat %>% filter(.data$subgroup==0)
dF <- dat_initial
## initial results
z.S <- z.F <- rep(NA, 2) # z-statistics
p.S <- p.F <- rep(NA, 2) # p-values
obsEvents.S <- obsEvents.F <- rep(NA, 2) # observed number of events
## cut data at FA when S reaches certain percent
# population S
d <- cut_by_event(dS, targetEvents = targetEvents_new[1])
FA_time_S <- d$calendarCutoff[1]
res <- logrank.one.sided(time = d$survTimeCut, event = d$eventCut,
group = d$trt, STRATA = NULL)
z.S[1] <- res$z # non-adjusted Z statistic
p.S[1] <- res$p
obsEvents.S[1] <- sum(d$eventCut)
nS <- nrow(d)
devtools::load_all(".")
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
devtools::load_all(".")
devtools::load_all(".")
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)  # 600 1:1
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
# 100 BM+
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)  # 600 1:1
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
# 100 BM+
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
(obsEvents.S[1] <- sum(d$eventCut))
logrank.one.sided(time = d$survTimeCut, event = d$eventCut,
group = d$trt, STRATA = NULL)
sum(d$eventCut)
(obsEvents.S[1] <- sum(res$obs))
logrank.one.sided(time = d$survTimeCut, event = d$eventCut,
group = d$trt, STRATA = NULL)
sum(d$eventCut)
logrank.one.sided(time = d$survTimeCut, event = d$eventCut,
group = d$trt, STRATA = NULL)
(obsEvents.S[1] <- sum(res$obs))
sum(d$eventCut)
logrank.one.sided(time = d$survTimeCut, event = d$eventCut,
group = d$trt, STRATA = NULL)
sum(res$obs)
sum(d$eventCut)
View(zstats_FA)
alpha1 <- alpha2 <- 0.0125
Z.alpha1 <- qnorm(1-alpha1)
F_reject <- F_reject <- zstats_FA$z.S[1] > Z.alpha1
alpha1 <- alpha2 <- 0.0125
Z.alpha1 <- qnorm(1-alpha1)
(F_reject <- zstats_FA$z.S[1] > Z.alpha1)
alpha1 <- alpha2 <- 0.0125
Z.alpha1 <- qnorm(1-alpha1)
Z.alpha2 <- qnorm(1-alpha2)
(S_reject <- zstats_FA$z.S[1] > Z.alpha1)
(F_reject <- zstats_FA$z.F[2] > Z.alpha2)
devtools::load_all(".")
getZtests_BME(zstats_FA, alpha1 = 0.0125, alpha2 = 0.0125)
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
dat_full <- bind_rows(dat_initial, dat_additional)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
getZtests_BME(zstats_FA, alpha1 = 0.0125, alpha2 = 0.0125)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
rm(list=ls())
library(devtools)
rm(list=ls())
library(devtools)
#if (!require("enrichDesign")) devtools::install_github("wonderzhm/enrichDesign")
library(knitr)
library(gsDesign)
library(dplyr)
library(rpact)
library(ggplot2)
library(ggh4x)
library(ggpubr)
library(scales)
library(parallel)
library(doParallel)
library(survival)
library(BME)
seed <- 202506
nclust <- 10
nsim_per_cluster <- 1000 # set at least 1000 for final report
pr <- 0.5
alpha <- 0.025
medS_con <- 10
medSc_con <- 9
accrual_duration <- 20
IF <- 0.5
nS <- 300
nF <- 600
nSc <- nF - nS
hrS <- 0.7
hrSc <- 0.85
maturity <- 0.7
(targetEvents_S <- c(nS*maturity*IF, nS*maturity))
(hrF <- exp(pr*log(hrS)+(1-pr)*log(hrSc))) # HR for F
# find the thresholds
thresholds <- getDesignParameters(
n = nF, prop_S = pr, duration = accrual_duration, targetEvents.S = targetEvents_S,
CP.Sc.threshold = 0.2, CP.S.threshold = 0.8, CP.F.threshold = 0.8,
hazard_S = log(2)/c(medS_con, medS_con/hrS), hazard_Sc = log(2)/c(medSc_con, medSc_con/hrSc),
dropout_S = c(0, 0), dropout_Sc = c(0, 0), ratio = 1, alpha = alpha)
(HR.S.threshold <- thresholds$HR.S.threshold)
(HR.F.threshold <- thresholds$HR.F.threshold)
(HR.Sc.threshold <- thresholds$HR.Sc.threshold)
(hrF <- exp(pr*log(hrS)+(1-pr)*log(hrSc))) # HR for F
# find the thresholds
thresholds <- getDesignParameters(
n = nF, prop_S = pr, duration = accrual_duration, targetEvents.S = targetEvents_S,
CP.Sc.threshold = 0.2, CP.S.threshold = 0.8, CP.F.threshold = 0.8,
hazard_S = log(2)/c(medS_con, medS_con/hrS), hazard_Sc = log(2)/c(medSc_con, medSc_con/hrSc),
dropout_S = c(0, 0), dropout_Sc = c(0, 0), ratio = 1, alpha = alpha)
(HR.S.threshold <- thresholds$HR.S.threshold)
(HR.F.threshold <- thresholds$HR.F.threshold)
(HR.Sc.threshold <- thresholds$HR.Sc.threshold)
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
dat_full <- bind_rows(dat_initial, dat_additional)
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
dat_full <- bind_rows(dat_initial, dat_additional)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
devtools::load_all(".")
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
(zstats_FA <- getZstats_FA(dat_initial, dat_additional, targetEvents = c(210, 280, 420), expand))
getZtests_BME(zstats_FA, alpha1 = 0.0125, alpha2 = 0.0125)
getZtests_BME(zstats_FA, alpha1 = 0.0125, alpha2 = 0.0125)
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)
dat_additional <- simu_single_arm(n = 100) %>%
dplyr::mutate(subgroup = 1,  enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20, .before = .data$enterTime)
dat_full <- bind_rows(dat_initial, dat_additional)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
getZtests_BME(zstats_FA, alpha1 = 0.0125, alpha2 = 0.0125)
devtools::load_all(".")
View(dat_full)
da <- simu_enrich_trial(n = 200, prop_S = 0.5, ratio = 1, duration = 20)
View(da)
da <- simu_enrich_trial(n = 200, prop_S = 0, ratio = 1, duration = 20)
da <- simu_enrich_trial(n = 200, prop_S = 1, ratio = 1, duration = 20)
da <- simu_enrich_trial(n = 200, prop_S = 0.5, ratio = 1, duration = 20)
da <- simu_enrich_trial(n = 200, prop_S = 0.5, ratio = 1, duration = 20) %>% filter(subgroup == 1)
View(da)
da <- simu_enrich_trial(n = 200, prop_S = 0.5, ratio = 1, duration = 20) %>%
filter(subgroup == 1) %>%
dplyr::mutate(enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20)
View(da)
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)
dat_additional <- simu_enrich_trial(n = 200, prop_S = 0.5, ratio = 1, duration = 20) %>%
filter(subgroup == 1) %>%
dplyr::mutate(enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20)
dat_full <- bind_rows(dat_initial, dat_additional)
View(dat_full)
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)
dat_additional <- simu_enrich_trial(n = 200, prop_S = 0.5, ratio = 1, duration = 20) %>%
filter(subgroup == 1) %>%
dplyr::mutate(enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20)
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
View(dat_full)
rm(list=ls())
library(devtools)
#if (!require("enrichDesign")) devtools::install_github("wonderzhm/enrichDesign")
library(knitr)
library(gsDesign)
library(dplyr)
library(rpact)
library(ggplot2)
library(ggh4x)
library(ggpubr)
library(scales)
library(parallel)
library(doParallel)
library(survival)
library(BME)
seed <- 202506
nclust <- 10
nsim_per_cluster <- 1000 # set at least 1000 for final report
pr <- 0.5
alpha <- 0.025
medS_con <- 10
medSc_con <- 9
accrual_duration <- 20
IF <- 0.5
nS <- 300
nF <- 600
nSc <- nF - nS
hrS <- 0.7
hrSc <- 0.85
maturity <- 0.7
(targetEvents_S <- c(nS*maturity*IF, nS*maturity))
(hrF <- exp(pr*log(hrS)+(1-pr)*log(hrSc))) # HR for F
# find the thresholds
thresholds <- getDesignParameters(
n = nF, prop_S = pr, duration = accrual_duration, targetEvents.S = targetEvents_S,
CP.Sc.threshold = 0.2, CP.S.threshold = 0.8, CP.F.threshold = 0.8,
hazard_S = log(2)/c(medS_con, medS_con/hrS), hazard_Sc = log(2)/c(medSc_con, medSc_con/hrSc),
dropout_S = c(0, 0), dropout_Sc = c(0, 0), ratio = 1, alpha = alpha)
(HR.S.threshold <- thresholds$HR.S.threshold)
(HR.F.threshold <- thresholds$HR.F.threshold)
(HR.Sc.threshold <- thresholds$HR.Sc.threshold)
dat_initial <- simu_enrich_trial(n = 600, prop_S = 0.5, ratio = 1, duration = 20)
dat_additional <- simu_enrich_trial(n = 200, prop_S = 0.5, ratio = 1, duration = 20) %>%
filter(subgroup == 1) %>%
dplyr::mutate(enterTime = .data$enterTime + 20, calendarTime = .data$calendarTime + 20)
dat_full <- bind_rows(dat_initial, dat_additional) %>% arrange(subgroup)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 120))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
(zstats_IA <- getZstats_IA(dat_initial, targetEvents.Sc = 105))
C <- thresholds$HR.Sc.threshold
(expand <- zstats_IA$hr.Sc.IA < C)
devtools::load_all(".")
