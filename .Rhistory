dropoutRate2 = 0,
maxNumberOfSubjects = 600
)
result
# Get GSD
library(rpact)
targetEvents.S.noexpand <- c(150, 210)
targetEvents.S.expand <- c(200, 350)
targetEvents.F <- c(300, 420)
alpha1 <- 0.0125
alpha2 <- 0.0125
design_S_noexpand <- getDesignGroupSequential(kMax = length(targetEvents.S.noexpand), alpha = alpha1, informationRates = targetEvents.S.noexpand / max(targetEvents.S.noexpand))
design_S_expand <- getDesignGroupSequential(kMax = length(targetEvents.S.expand), alpha = alpha1, informationRates = targetEvents.S.expand / max(targetEvents.S.expand))
design_F <- getDesignGroupSequential(kMax = length(targetEvents.F), alpha = alpha2, informationRates = targetEvents.F / max(targetEvents.F))
HRs <- cbind(
hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)
delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)
simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {
# currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
orr_S <- c(0.2, 0.2 + delta_orr_S[i])
orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
res <- getOC_BME_GS(
seed  = 2025 + i,   # make sure scenarios are statistically independent
nsim = 500,
nF = 600, nS_additional = 200,
prop_S = 0.5,
duration = 20,
duration_additional = 6,
targetEvents.Sc = 105,
HR.Sc.threshold = 0.9,
targetEvents.S.noexpand = targetEvents.S.noexpand,
targetEvents.S.expand = targetEvents.S.expand,
targetEvents.F  = targetEvents.F,
design_S_noexpand = design_S_noexpand,
design_S_expand = design_S_expand,
design_F = design_F,
hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
orr_S  = orr_S,
orr_Sc = orr_Sc,
rho_S = 0.7, rho_Sc = 0.7,
alpha1 = alpha1, alpha2 = alpha2,
selection = "orr",
orr_thres  = 0.1,
orr_number = 200
)
power.Fs <- res$F.reject
power.Ss <- res$S.reject
expansion <- res$expand
timing.IAs <- res$timing.IA
timing.Fs <- res$timing.F
timing.Ss <- res$timing.S
return(c(
orr_S = orr_S[2],
orr_Sc = orr_Sc[2],
Power_F = mean(power.Fs),
Power_S = mean(power.Ss),
Overall_Power = mean(power.Fs | power.Ss),
Prob_Expand = mean(expansion),
Avg_Sample_Size = 600 + 100 * mean(expansion),
Timing_IA = mean(timing.IAs),
Timing_S_expand = mean(timing.Ss[expansion == 1]),
Timing_S_noexpand = mean(timing.Ss[expansion == 0]),
Timing_F = mean(timing.Fs)
))
}
n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)
clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
"simulate_scenario",
"getOC_BME_GS", "getZtest_GS",
"getZstats_GS", "getZstats_IA",
"simu_enrich_trial", "cut_by_event",
"logrank.one.sided", "log"))
results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))
stopCluster(cl)
results_df <- as.data.frame(cbind(HRs,
do.call(rbind, results_list)))
print(round(results_df, 4))
# increase BM+ sample size
HRs <- cbind(
hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)
delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)
simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {
# currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
orr_S <- c(0.2, 0.2 + delta_orr_S[i])
orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
res <- getOC_BME_GS(
seed  = 2025 + i,   # make sure scenarios are statistically independent
nsim = 10000,
nF = 600, nS_additional = 200,
prop_S = 0.5,
duration = 20,
duration_additional = 6,
targetEvents.Sc = 105,
HR.Sc.threshold = 0.9,
targetEvents.S.noexpand = targetEvents.S.noexpand,
targetEvents.S.expand = targetEvents.S.expand,
targetEvents.F  = targetEvents.F,
design_S_noexpand = design_S_noexpand,
design_S_expand = design_S_expand,
design_F = design_F,
hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
orr_S  = orr_S,
orr_Sc = orr_Sc,
rho_S = 0.7, rho_Sc = 0.7,
alpha1 = alpha1, alpha2 = alpha2,
selection = "orr",
orr_thres  = 0.1,
orr_number = 200
)
power.Fs <- res$F.reject
power.Ss <- res$S.reject
expansion <- res$expand
timing.IAs <- res$timing.IA
timing.Fs <- res$timing.F
timing.Ss <- res$timing.S
return(c(
orr_S = orr_S[2],
orr_Sc = orr_Sc[2],
Power_F = mean(power.Fs),
Power_S = mean(power.Ss),
Overall_Power = mean(power.Fs | power.Ss),
Prob_Expand = mean(expansion),
Avg_Sample_Size = 600 + 100 * mean(expansion),
Timing_IA = mean(timing.IAs),
Timing_S_expand = mean(timing.Ss[expansion == 1]),
Timing_S_noexpand = mean(timing.Ss[expansion == 0]),
Timing_F = mean(timing.Fs)
))
}
n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)
clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
"simulate_scenario",
"getOC_BME_GS", "getZtest_GS",
"getZstats_GS", "getZstats_IA",
"simu_enrich_trial", "cut_by_event",
"logrank.one.sided", "log"))
results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))
stopCluster(cl)
results_df <- as.data.frame(cbind(HRs,
do.call(rbind, results_list)))
print(round(results_df, 4))
alpha1 <- 0.0125
alpha2 <- 0.0125
HRs <- cbind(
hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)
delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)
simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {
# currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
orr_S <- c(0.2, 0.2 + delta_orr_S[i])
orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
res <- getOC_BME(
seed = 2025 + i,   # make sure scenarios are statistically independent
nsim = 10000,
nF = 600, nS_additional = 100,
prop_S = 0.5,
duration = 20,
duration_additional = 3,
targetEvents.Sc = 105,
targetEvents = c(210, 280, 420),
HR.Sc.threshold = 0.9,
hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
orr_S = orr_S,
orr_Sc = orr_Sc,
rho_S = -0.7, rho_Sc = -0.7,
alpha1 = alpha1, alpha2 = alpha2,
selection = "orr",
orr_thres = 0.1,
orr_number = 200
)
power.Fs <- res$F.reject
power.Ss <- res$S.reject
expansion <- res$expand
timing.IAs <- res$timing.IA
timing.Fs <- res$timing.F
timing.Ss <- res$timing.S
return(c(
orr_S = orr_S[2],
orr_Sc = orr_Sc[2],
Power_F = mean(power.Fs),
Power_S = mean(power.Ss),
Overall_Power = mean(power.Fs | power.Ss),
Prob_Expand = mean(expansion),
Avg_Sample_Size = 600 + 100 * mean(expansion),
Timing_IA = mean(timing.IAs),
Timing_S_expand = mean(timing.Ss[expansion == 1]),
Timing_S_noexpand = mean(timing.Ss[expansion == 0]),
Timing_F = mean(timing.Fs)
))
}
n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)
clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
"simulate_scenario",
"getZstats_IA", "getZstats_FA",
"getZtests_BME", "getOC_BME",
"simu_enrich_trial", "cut_by_event",
"logrank.one.sided", "log"))
results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))
stopCluster(cl)
results_df <- as.data.frame(cbind(HRs,
do.call(rbind, results_list)))
print(round(results_df, 4))
alpha1 <- 0.0125
alpha2 <- 0.0125
HRs <- cbind(
hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)
delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.25, 0.30, 0.35, 0.4, 0.4)
simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {
# currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
orr_S <- c(0.2, 0.2 + delta_orr_S[i])
orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
res <- getOC_BME(
seed = 2025 + i,   # make sure scenarios are statistically independent
nsim = 10000,
nF = 600, nS_additional = 100,
prop_S = 0.5,
duration = 20,
duration_additional = 3,
targetEvents.Sc = 105,
targetEvents = c(210, 280, 420),
HR.Sc.threshold = 0.9,
hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
orr_S = orr_S,
orr_Sc = orr_Sc,
rho_S = 0.7, rho_Sc = 0.7,
alpha1 = alpha1, alpha2 = alpha2,
selection = "orr",
orr_thres = 0.1,
orr_number = 200
)
power.Fs <- res$F.reject
power.Ss <- res$S.reject
expansion <- res$expand
timing.IAs <- res$timing.IA
timing.Fs <- res$timing.F
timing.Ss <- res$timing.S
return(c(
orr_S = orr_S[2],
orr_Sc = orr_Sc[2],
Power_F = mean(power.Fs),
Power_S = mean(power.Ss),
Overall_Power = mean(power.Fs | power.Ss),
Prob_Expand = mean(expansion),
Avg_Sample_Size = 600 + 100 * mean(expansion),
Timing_IA = mean(timing.IAs),
Timing_S_expand = mean(timing.Ss[expansion == 1]),
Timing_S_noexpand = mean(timing.Ss[expansion == 0]),
Timing_F = mean(timing.Fs)
))
}
n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)
clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
"simulate_scenario",
"getZstats_IA", "getZstats_FA",
"getZtests_BME", "getOC_BME",
"simu_enrich_trial", "cut_by_event",
"logrank.one.sided", "log"))
results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))
stopCluster(cl)
results_df <- as.data.frame(cbind(HRs,
do.call(rbind, results_list)))
print(round(results_df, 4))
# Get GSD
library(rpact)
targetEvents.S.noexpand <- c(150, 210)
targetEvents.S.expand <- c(200, 280)
targetEvents.F <- c(300, 420)
alpha1 <- 0.0125
alpha2 <- 0.0125
design_S_noexpand <- getDesignGroupSequential(kMax = length(targetEvents.S.noexpand), alpha = alpha1, informationRates = targetEvents.S.noexpand / max(targetEvents.S.noexpand))
design_S_expand <- getDesignGroupSequential(kMax = length(targetEvents.S.expand), alpha = alpha1, informationRates = targetEvents.S.expand / max(targetEvents.S.expand))
design_F <- getDesignGroupSequential(kMax = length(targetEvents.F), alpha = alpha2, informationRates = targetEvents.F / max(targetEvents.F))
HRs <- cbind(
hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)
delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)
simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {
# currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
orr_S <- c(0.2, 0.2 + delta_orr_S[i])
orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
res <- getOC_BME_GS(
seed  = 2025 + i,   # make sure scenarios are statistically independent
nsim = 10000,
nF = 600, nS_additional = 100,
prop_S = 0.5,
duration = 20,
duration_additional = 3,
targetEvents.Sc = 105,
HR.Sc.threshold = 0.9,
targetEvents.S.noexpand = targetEvents.S.noexpand,
targetEvents.S.expand = targetEvents.S.expand,
targetEvents.F  = targetEvents.F,
design_S_noexpand = design_S_noexpand,
design_S_expand = design_S_expand,
design_F = design_F,
hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
orr_S  = orr_S,
orr_Sc = orr_Sc,
rho_S = 0.7, rho_Sc = 0.7,
alpha1 = alpha1, alpha2 = alpha2,
selection = "orr",
orr_thres  = 0.1,
orr_number = 200
)
power.Fs <- res$F.reject
power.Ss <- res$S.reject
expansion <- res$expand
timing.IAs <- res$timing.IA
timing.Fs <- res$timing.F
timing.Ss <- res$timing.S
return(c(
orr_S = orr_S[2],
orr_Sc = orr_Sc[2],
Power_F = mean(power.Fs),
Power_S = mean(power.Ss),
Overall_Power = mean(power.Fs | power.Ss),
Prob_Expand = mean(expansion),
Avg_Sample_Size = 600 + 100 * mean(expansion),
Timing_IA = mean(timing.IAs),
Timing_S_expand = mean(timing.Ss[expansion == 1]),
Timing_S_noexpand = mean(timing.Ss[expansion == 0]),
Timing_S = mean(timing.Ss),
Timing_F = mean(timing.Fs)
))
}
n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)
clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
"simulate_scenario",
"getOC_BME_GS", "getZtest_GS",
"getZstats_GS", "getZstats_IA",
"simu_enrich_trial", "cut_by_event",
"logrank.one.sided", "log"))
results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))
stopCluster(cl)
results_df <- as.data.frame(cbind(HRs,
do.call(rbind, results_list)))
print(round(results_df, 4))
# Get GSD
library(rpact)
targetEvents.S.noexpand <- c(150, 210)
targetEvents.S.expand <- c(200, 350)
targetEvents.F <- c(300, 420)
alpha1 <- 0.0125
alpha2 <- 0.0125
design_S_noexpand <- getDesignGroupSequential(kMax = length(targetEvents.S.noexpand), alpha = alpha1, informationRates = targetEvents.S.noexpand / max(targetEvents.S.noexpand))
design_S_expand <- getDesignGroupSequential(kMax = length(targetEvents.S.expand), alpha = alpha1, informationRates = targetEvents.S.expand / max(targetEvents.S.expand))
design_F <- getDesignGroupSequential(kMax = length(targetEvents.F), alpha = alpha2, informationRates = targetEvents.F / max(targetEvents.F))
# increase BM+ sample size
HRs <- cbind(
hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)
delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)
simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {
# currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
orr_S <- c(0.2, 0.2 + delta_orr_S[i])
orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
res <- getOC_BME_GS(
seed  = 2025 + i,   # make sure scenarios are statistically independent
nsim = 10000,
nF = 600, nS_additional = 200,
prop_S = 0.5,
duration = 20,
duration_additional = 6,
targetEvents.Sc = 105,
HR.Sc.threshold = 0.9,
targetEvents.S.noexpand = targetEvents.S.noexpand,
targetEvents.S.expand = targetEvents.S.expand,
targetEvents.F  = targetEvents.F,
design_S_noexpand = design_S_noexpand,
design_S_expand = design_S_expand,
design_F = design_F,
hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
orr_S  = orr_S,
orr_Sc = orr_Sc,
rho_S = 0.7, rho_Sc = 0.7,
alpha1 = alpha1, alpha2 = alpha2,
selection = "orr",
orr_thres  = 0.1,
orr_number = 200
)
power.Fs <- res$F.reject
power.Ss <- res$S.reject
expansion <- res$expand
timing.IAs <- res$timing.IA
timing.Fs <- res$timing.F
timing.Ss <- res$timing.S
return(c(
orr_S = orr_S[2],
orr_Sc = orr_Sc[2],
Power_F = mean(power.Fs),
Power_S = mean(power.Ss),
Overall_Power = mean(power.Fs | power.Ss),
Prob_Expand = mean(expansion),
Avg_Sample_Size = 600 + 100 * mean(expansion),
Timing_IA = mean(timing.IAs),
Timing_S_expand = mean(timing.Ss[expansion == 1]),
Timing_S_noexpand = mean(timing.Ss[expansion == 0]),
Timing_S = mean(timing.Ss),
Timing_F = mean(timing.Fs)
))
}
n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)
clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
"simulate_scenario",
"getOC_BME_GS", "getZtest_GS",
"getZstats_GS", "getZstats_IA",
"simu_enrich_trial", "cut_by_event",
"logrank.one.sided", "log"))
results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))
stopCluster(cl)
results_df <- as.data.frame(cbind(HRs,
do.call(rbind, results_list)))
print(round(results_df, 4))
alpha1 <- 0.0125
alpha2 <- 0.0125
HRs <- cbind(
hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2)
)
delta_orr_S  <- c(0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
delta_orr_Sc <- c(0, 0.2, 0.15, 0.10, 0.05, 0, -0.05)
simulate_scenario <- function(i, HRs, delta_orr_S, delta_orr_Sc) {
# currently assume med is same for BM+ and BM- in control: medS_con = medSc_con = 9
hazard_S  <- log(2) / c(9, 9 / HRs[i, "hrS"])
hazard_Sc <- log(2) / c(9, 9 / HRs[i, "hrSc"])
orr_S <- c(0.2, 0.2 + delta_orr_S[i])
orr_Sc <- c(0.2, 0.2 + delta_orr_Sc[i])
res <- getOC_BME(
seed = 2025 + i,   # make sure scenarios are statistically independent
nsim = 10000,
nF = 600, nS_additional = 100,
prop_S = 0.5,
duration = 20,
duration_additional = 3,
targetEvents.Sc = 105,
targetEvents = c(210, 280, 420),
HR.Sc.threshold = 0.9,
hazard_S  = hazard_S,  hazard_Sc = hazard_Sc,
dropout_S = c(0, 0), dropout_Sc = c(0, 0),  w = 1, ratio = 1,
orr_S = orr_S,
orr_Sc = orr_Sc,
rho_S = 0.7, rho_Sc = 0.7,
alpha1 = alpha1, alpha2 = alpha2,
selection = "survival",
orr_thres = 0.01,
orr_number = 200
)
power.Fs <- res$F.reject
power.Ss <- res$S.reject
expansion <- res$expand
timing.IAs <- res$timing.IA
timing.Fs <- res$timing.F
timing.Ss <- res$timing.S
return(c(
Power_F = mean(power.Fs),
Power_S = mean(power.Ss),
Overall_Power = mean(power.Fs | power.Ss),
Prob_Expand = mean(expansion),
Avg_Sample_Size = 600 + 100 * mean(expansion),
Timing_IA = mean(timing.IAs),
Timing_S = mean(timing.Ss),
Timing_F = mean(timing.Fs)
))
}
n_cores <- max(1L, detectCores() - 1L)
cl <- makeCluster(n_cores)
clusterExport(cl, c("HRs", "delta_orr_S", "delta_orr_Sc",
"simulate_scenario",
"getZstats_IA", "getZstats_FA",
"getZtests_BME", "getOC_BME",
"simu_enrich_trial", "cut_by_event",
"logrank.one.sided", "log"))
results_list <- lapply(1:nrow(HRs), function(i) simulate_scenario(i, HRs, delta_orr_S, delta_orr_Sc))
